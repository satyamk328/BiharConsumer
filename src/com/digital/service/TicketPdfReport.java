package com.digital.service;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Service;

import com.digital.model.TicketDetails;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class TicketPdfReport {

	private final static String[] HEADER_ARRAY = { "S.No.", "Name", "Age", "Gender", "Status", "Seat/Berth" };
	public final static Font SMALL_BOLD = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD);
	public final static Font NORMAL_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
	private static final String TITLE = "TestReport";
    public static final String PDF_EXTENSION = ".pdf";
    
	public ByteArrayInputStream ticketReport1(List<TicketDetails> tickets) {
		Document  document = new Document(PageSize.A4); 
		ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            HeaderFooter event = new HeaderFooter();
            event.setHeader("DigitalBihar Bus Ticket");
            PdfWriter pdfWriter = PdfWriter.getInstance(document, out);
			pdfWriter.setPageEvent(event);
            document.open();
            addTitlePage(document, TITLE);
            addContent(document, tickets);
			document.close();
		} catch (DocumentException ex) {
			log.error("Error occurred: {0}", ex);
		}
		return new ByteArrayInputStream(out.toByteArray());
    }
	
	/** Helper methods start here **/  
    private void addTitlePage(Document document, String title) throws DocumentException {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 3);
        preface.add(new Phrase("Test Report: ", NORMAL_FONT));
        preface.add(new Phrase(title, NORMAL_FONT));
        addEmptyLine(preface, 1);
        preface.add(new Phrase("Date: ", SMALL_BOLD));
        preface.add(new Phrase(new Date().toString(), NORMAL_FONT));
        addEmptyLine(preface, 1);
        preface.add(new Phrase("Report generated by: ", SMALL_BOLD));
        preface.add(new Phrase("Arun", NORMAL_FONT));
        addEmptyLine(preface, 2);
        preface.add(new Phrase("This is basically a sample report.", NORMAL_FONT));
        document.addSubject("PDF : " + title);
        preface.setAlignment(Element.ALIGN_CENTER);
        document.add(preface);
        document.newPage();
    }
    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
    
	private void addContent(Document document, List<TicketDetails> tickets) throws DocumentException {
		Paragraph paragraph = new Paragraph();
		paragraph.setFont(NORMAL_FONT);
		createReportTable(paragraph, tickets);
		document.add(paragraph);
	}

	private void createReportTable(Paragraph paragraph, List<TicketDetails> dataObjList) {
		PdfPTable table = new PdfPTable(6);
		table.setWidthPercentage(100);
		paragraph.add(new Chunk("Report Table :- ", SMALL_BOLD));
		if (null == dataObjList) {
			paragraph.add(new Chunk("No data to display."));
			return;
		}
		addHeaderInTable(HEADER_ARRAY, table);
		int count = 1;
		for (TicketDetails dataObject : dataObjList) {
			addToTable(table, String.valueOf(count) + ".");
			addToTable(table, dataObject.getCustomerName());
			addToTable(table, String.valueOf(dataObject.getAge()));
			addToTable(table, dataObject.getEmail());
			addToTable(table, dataObject.getEmail());
			addToTable(table, dataObject.getEmail());
			count++;
		}
		paragraph.add(table);
	}

	private void addToTable(PdfPTable table, String data) {
		table.addCell(new Phrase(data, NORMAL_FONT));
	}

	private void addHeaderInTable(String[] headerArray, PdfPTable table) {
		PdfPCell c1 = null;
		for (String header : headerArray) {
			c1 = new PdfPCell(new Phrase(header, SMALL_BOLD));
			c1.setBackgroundColor(BaseColor.GREEN);
			c1.setHorizontalAlignment(Element.ALIGN_CENTER);
			table.addCell(c1);
		}
		table.setHeaderRows(1);
	}
	
	private Paragraph getParagraph(){        
        Paragraph paragraph = new Paragraph();
        paragraph.setFont(NORMAL_FONT);
        addEmptyLine(paragraph, 1);
        return paragraph;
    }
	
	public ByteArrayInputStream ticketReport(List<TicketDetails> tickets) {

		Document document = new Document();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			PdfPTable table = new PdfPTable(6);
			table.setWidthPercentage(60);
			table.setWidths(new int[] { 3, 5, 3, 3, 3, 5 });

			addHeaderInTable(HEADER_ARRAY, table);

			int i = 1;
			for (TicketDetails details : tickets) {

				PdfPCell cell;

				cell = new PdfPCell(new Phrase(String.valueOf(i)));
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				table.addCell(cell);

				cell = new PdfPCell(new Phrase(details.getCustomerName()));
				cell.setPaddingLeft(5);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				table.addCell(cell);

				cell = new PdfPCell(new Phrase(String.valueOf(details.getAge())));
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setPaddingRight(5);
				table.addCell(cell);

				cell = new PdfPCell(new Phrase(details.getGender()));
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setPaddingRight(5);
				table.addCell(cell);

				cell = new PdfPCell(new Phrase("CNF"));
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setPaddingRight(5);
				table.addCell(cell);

				cell = new PdfPCell(new Phrase(details.getSeatNumber()));
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setPaddingRight(5);
				table.addCell(cell);

				i++;
			}

			PdfWriter.getInstance(document, out);
			document.open();
			document.add(table);

			document.close();
		} catch (DocumentException ex) {
			log.error("Error occurred: {0}", ex);
		}
		return new ByteArrayInputStream(out.toByteArray());
	}

	
}
