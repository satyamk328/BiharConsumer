#================================
# = User Query
#================================
select_user_history=select * from user_master order by UserId ASC
select_user_byid=select * from user_master where UserId=:userId
insert_user_detail=INSERT INTO user_master (Name, Email,Address,PhoneNumber,PanNumber, Password, City, State, IsLock, IsActive,CreatedBy, DateCreated, ModifiedBy, DateModified) VALUES \
				                   (:name ,:email , :address ,	:phoneNumber , :panNumber , :password,:city,:state, false, true, Session_user, CURRENT_TIMESTAMP, Session_user, CURRENT_TIMESTAMP)
insert_user_module=INSERT INTO user_module (UserId,RoleName,IsRecharge,IsBillPayment,IsMoneyTransfer,IsAddmoney,IsExportReport,IsBusBook,CreatedBy,	DateCreated, ModifiedBy, DateModified) \
                                VALUES (:userId, :roleName ,true , true , true , true , true, true, Session_user,CURRENT_TIMESTAMP, Session_user, CURRENT_TIMESTAMP)
insert_user_login_detail=INSERT INTO user_login (UserId,UserName,SessionId,LoginDate,Address,ClientIp,ClientHost)\
				                values(:userId,:userName,:sessionId,CURRENT_TIMESTAMP,:address,:clientIp,:clientHost)
update_user_master_Attempt=UPDATE user_master SET Attempt =:attempt, IsLock=:isLock WHERE UserId =:userId
update_user_password=UPDATE user_master SET Password =:password WHERE UserId =:userId
select_user_detail_by_phone=SELECT * FROM user_master LEFT OUTER JOIN user_module ON user_master.UserId=user_module.UserId WHERE user_master.phoneNumber \
								=:phone  AND IsActive=0 AND user_module.RoleName='RETAILER' LIMIT 1
select_user_detail_by_email=SELECT * FROM user_master LEFT OUTER JOIN user_module ON user_master.UserId=user_module.UserId WHERE user_master.Email \
								=:email  AND IsActive=0 AND user_module.RoleName='RETAILER' LIMIT 1
upadte_logout_date=update user_login set LogoutDate= CURRENT_TIMESTAMP, ClientIp=:clientIp where UserId =:userId and LogoutDate is null
#================================
# = Wallet Query
#================================
select_wallet_details_by_user=select * from user_wallet where UserId=:userId order by DateModified ASC
select_updated_wallet=select * from user_wallet where UserId=:userId order by DateModified ASC limit 1
update_wallet=UPDATE user_wallet set AddedBalance=:addedBalance,CurrentBalance=CurrentBalance+AddedBalance,	PreviousBalance=CurrentBalance where UserId=:userId
#================================
# = Search City Query
#================================
select_search_cities=select * from search_city order by CityId
select_search_top_cities=select * from search_city where lower(DisplayName) like concat('%', ? , '%') order by CityId
select_search_top_cities_By_Id=select * from search_city where CityId=:cityId
insert_search_city=INSERT INTO search_city(CityName, DisplayName, StateName, Country, District) \
             	VALUES(:cityName, :displayName, :stateName, :country, :district)
delete_top_city=delete from search_city where CityId = :cityId
update_top_city=UPDATE search_city set CityName=:cityName,DisplayName=:displayName,StateName=:stateName,Country=:country,District=:district where CityId=:cityId
#================================
# = Amenity Query
#================================
select_filter_aminities=SELECT bus_amenity.* FROM bus_amenity INNER JOIN bus_amenity_mapping ON bus_amenity.AmenityId=bus_amenity_mapping.AmenityId WHERE bus_amenity_mapping.BusId=:busId
select_all_aminities= select * from bus_amenity order by AmenitiesId ASC
delete_aminities_query=delete from bus_amenity_mapping where AmenityId=:amenityId and BusId=:busId
insert_aminities_query=insert into bus_amenity_mapping (AmenityId,BusId) values(:amenityId,:busId)
#    end top cities QUERY
select_trip_by_city=select * from ( \
					SELECT r.routeid,CONCAT(ts.stopid,'::',re.stopid,'::',ts.stopnumber,'::',re.stopnumber) tripid,ts.arrivaldate arrivaldate,ts.arrivaltime arrivaltime,re.arrivaldate departuredate,re.arrivaltime departuretime, \
					(select sum(tdis.distance) from trip_details tdis join top_cities city on (city.cityid = tdis.cityid) where  tdis.stopnumber > ts.stopnumber and tdis.stopnumber <= re.stopnumber) distance, \
					(select sum(tdis.duration) from trip_details tdis join top_cities city on (city.cityid = tdis.cityid) where  tdis.stopnumber > ts.stopnumber and tdis.stopnumber <= re.stopnumber) duration, \
					(select sum(tdis.basefare) from trip_details tdis join top_cities city on (city.cityid = tdis.cityid) where  tdis.stopnumber > ts.stopnumber and tdis.stopnumber <= re.stopnumber) basefare, \
					ss.displayname source,se.displayname destination \
					FROM route_master r	JOIN trip_details ts ON (ts.routeid = r.routeid) \
					JOIN top_cities ss ON (ss.cityid = ts.cityid) \
					JOIN trip_details re ON (re.routeid = r.routeid) \
					JOIN top_cities se ON (se.cityid = re.cityid) \
					WHERE lower(ss.displayname) LIKE ? AND lower(se.displayname) LIKE ? and re.arrivaldate::TEXT=? AND ts.stopnumber < re.stopnumber \
					) tt JOIN bus_operators_route_mapping bsm on (bsm.routeid=tt.routeid) JOIN bus_master bs on (bs.busid=bsm.busid) JOIN bus_layout bl ON (bl.id=bsm.layoutid)
select_boadingstopping_details=select * from city_stop_mapping where tripid =?
select_bustype=select * from bus_type order by bustype
select_bus_cancellation=select * from bus_cancellation_policy where busid = ? 

select_businfomation_detail=select * from bus_details where sourceid = (select refnumber from top_cities where displayname like ? ) and destinationid = \
				       (select refnumber from top_cities where displayname like ? )
insert_customer_ticket=INSERT INTO customer_bus_booking_details	(userid,busname,busnumber,seatnumber,srccityname,destcityname,arrivaldatetime,departuredatetime,seattype,totalfare,customername,age,email, \
				     phonenumber,idtype,idnumber,islicence,createdon,createdby,modifyon,modifyby) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,Session_user,CURRENT_TIMESTAMP,Session_user,CURRENT_TIMESTAMP)
select_bus_seat_details=select sm.*,borm.sleaperFare, (CASE WHEN lower(seattype) = 'seater' THEN \
 							borm.seaterFare+ (select sum(tdis.basefare) from trip_details tdis join top_cities city on (city.cityid = tdis.cityid) where tdis.stopnumber > ? and tdis.stopnumber <= ?) \
 							ELSE borm.sleaperFare+ (select sum(tdis.basefare) from trip_details tdis join top_cities city on (city.cityid = tdis.cityid) where tdis.stopnumber > ? and tdis.stopnumber <= ?) \
 							END) fare  from bus_layout bl JOIN bus_operators_route_mapping borm ON (borm.layoutid=bl.id) JOIN seat_master sm ON (bl.id=sm.seatlayoutid) where lower(busid)= ?
select_customer_book_ticket=select * from customer_bus_booking_details where lower(userid)=? limit ?

#================================
# = Auditing Query
#================================
central_log_insert_query=insert into central_logs(AppName, LogLevel, LogTimeStamp, LogMessage) values( :appName, :logLevel, :logTimeStamp, :logMessage)
service_api_response_log.insert.entry=INSERT INTO servicing_platform_api_response_log (ApiName, StartTime,EndTime,DurationMilliSeconds,RequestHttpMethod,RequestUrl,RequestBody,ResponseHttpCode,ResponseBody,RequestHeader,ResponseHeader) \
                                                 VALUES (:ApiName ,:StartTime,:EndTime,:DurationMilliSeconds,:RequestHttpMethod,:RequestUrl,:RequestBody,:ResponseHttpCode,:ResponseBody,:RequestHeader,:ResponseHeader )

