#================================
# = User Query
#================================
select_user_history=select * from user_master order by UserId ASC
select_user_byid=select * from user_master where UserId=:userId
insert_user_detail=INSERT INTO user_master (RoleId,Name, Email,Address,PhoneNumber,PanNumber,AadharNumber, Password, City, State,Country, IsLock, IsActive,CreatedBy, DateCreated, ModifiedBy, DateModified) VALUES \
				                   (:roleId,:name ,:email , :address ,	:phoneNumber , :panNumber ,:aadharNumber, :password,:city,:state,'INDIA', false, true, Session_user(), CURRENT_TIMESTAMP, Session_user(), CURRENT_TIMESTAMP)
update_user_detail=UPDATE User_master SET NAME =:name, Address=:address,PanNumber=:panNumber,AadharNumber=:aadharNumber, City=:city,State=:state WHERE UserId=:userId
insert_user_login_detail=INSERT INTO user_login (UserId,UserName,SessionId,LoginDate,Address,ClientIp,ClientHost)\
				                values(:userId,:userName,:sessionId,CURRENT_TIMESTAMP,:address,:clientIp,:clientHost)
update_user_master_Attempt=UPDATE user_master SET Attempt =:attempt, IsLock=:isLock WHERE UserId =:userId
update_user_password=UPDATE user_master SET Password =:password WHERE UserId =:userId and Password =:oldPassword
select_user_detail_by_phone=SELECT * FROM user_master WHERE user_master.phoneNumber=:phone AND user_master.IsActive=1 LIMIT 1
select_user_detail_by_email=SELECT * FROM user_master WHERE  user_master.Email=:email AND user_master.IsActive=1 LIMIT 1
upadte_logout_date=update user_login set LogoutDate= CURRENT_TIMESTAMP, ClientIp=:clientIp where UserId =:userId and LogoutDate is null
#================================
# = Wallet Query
#================================
select_wallet_details_by_user=select * from user_wallet where UserId=:userId order by DateModified ASC
select_updated_wallet=select * from user_wallet where UserId=:userId order by DateModified ASC limit 1
update_wallet=UPDATE user_wallet set AddedBalance=:addedBalance,CurrentBalance=CurrentBalance+AddedBalance,	PreviousBalance=CurrentBalance where UserId=:userId
#================================
# = Search City Query
#================================
select_search_cities=select * from city_master order by CityId
select_search_top_cities=select * from city_master where lower(DisplayName) like concat('%', ? , '%') order by CityId
select_search_top_cities_By_Id=select * from city_master where CityId=:cityId
insert_search_city=INSERT INTO city_master(CityName, DisplayName, StateName, Country, District) VALUES(:cityName, :displayName, :stateName, :country, :district)
delete_top_city=delete from city_master where CityId = :cityId
update_top_city=UPDATE city_master set CityName=:cityName,DisplayName=:displayName,StateName=:stateName,Country=:country,District=:district where CityId=:cityId
select_city_stop_by_cityId=select * from city_stop_master where CityId=:cityId
insert_city_stop=insert into city_stop_master (CityId,LocationName,LocationAddress,LandMark,Lat,Lng) values(:cityId,:locationName,:locationAddress,:landMark,:lat,:lng)
delete_cityStop_bycityId=delete from city_stop_master where CityId IN (:cityId)
select_boadingstopping_details=select * from city_stop_master where CityId = :cityId and CityStopId IN (:cityStopIds)

#================================
# = Amenity Query
#================================
select_filter_aminities=SELECT amenity_master.* FROM amenity_master INNER JOIN amenity_mapping ON amenity_master.AmenityId=amenity_mapping.AmenityId WHERE amenity_mapping.BusId=:busId
select_all_aminities= select * from amenity_master order by AmenityId ASC
select_aminities_by_busid=select * from amenity_master where AmenityId=:amenityId and BusId=:busId
delete_aminities_query=delete from bus_amenity_mapping where AmenityId=:amenityId and BusId=:busId
insert_aminities_query=insert into bus_amenity_mapping (AmenityId,BusId) values(:amenityId,:busId)

#================================
# = Bus Route Query
#================================
select_trip_by_city=SELECT sm.ScheduleId as scheduleId, sm.BusId as busId, sm.SleeperFare as sleeperFare, sm.SeaterFare as seaterFare, sm.IsFixed as isFixedFare, tm1.CityId AS srcCityId, tm2.CityId AS destCityId, tm1.CityStops AS srcStops, \
 						tm2.CityStops  AS destStops, tm1.ArrivalDate AS departureDate, tm1.ArrivalTime AS departureTime, tm2.ArrivalDate AS arrivalDate, tm2.ArrivalTime AS arrivalTime, \
 						tm1.CitySequance as srcCitySequance, tm2.CitySequance as destCitySequance, \
 						(SELECT SUM(distance) FROM trip_master tdis WHERE tdis.ScheduleId=tm1.ScheduleId AND tdis.CitySequance > tm1.CitySequance AND tdis.CitySequance <=tm2.CitySequance) AS Distance, \
						(SELECT SUM(tdis.basefare) FROM trip_master tdis  WHERE tdis.ScheduleId=tm1.ScheduleId AND tdis.CitySequance > tm1.CitySequance AND tdis.CitySequance <=tm2.CitySequance) basefare \
 						FROM digitalbihar.Schedule_master sm, digitalbihar.trip_master tm1, digitalbihar.trip_master tm2 \
						WHERE sm.ScheduleId = tm1.ScheduleId AND tm1.ScheduleId = tm2.ScheduleId AND  tm1.ScheduleId = tm2.ScheduleId AND \
						tm1.CityId =:srcCityId AND tm2.CityId =:destCityId AND tm1.CitySequance < tm2.CitySequance AND tm1.ArrivalDate =:arrivalDate
						
#================================
# = Cancel Policy Query
#================================
select_bus_cancellationByBusId=select * from bus_cancellation_policy where BusId =:busId
select_bus_cancellation=select * from bus_cancellation_policy

#================================
# = Bus Query
#================================
select_Bus_Details_By_BusId=SELECT bm.BusId AS busId, bm.UserId AS ownerId, bm.LayoutId AS layoutId, bm.BusNumber AS busNumber, bm.TravelsName AS travelsName, \
							bm.RegistationNumber AS registationNumber, bm.color AS color, bm.TotalSeats AS totalSeats, bm.IsAc AS isAc, blm.Layout AS Layout, \
							blm.Description AS layOutDescription, blm.IsSeater AS isSeater, blm.IsSleeper AS isSleeper \
							FROM bus_master bm, bus_layout_master blm WHERE bm.LayoutId = blm.LayoutId AND bm.BusId =:busId
#================================
# = Bus Seat Query
#================================
select_SeatDetails_By_LayoutId=SELECT * from seat_master where BusLayoutId=:layoutId
 
#================================
# = Bus Trip Query
#================================
select_TripCities_BySrcDescCities=SELECT tm.CityId as cityId, tm.CitySequance as citySequance FROM trip_master tm where tm.CitySequance between :srcCitySequance and :destCitySequance and tm.ScheduleId = :scheduleId order by tm.CitySequance
select_TripCitySequence_ByCityId=SELECT tm.CitySequance as citySequance FROM trip_master tm where tm.CityId = :cityId and tm.ScheduleId = :scheduleId
 
#================================
# = Bus Booking Query
#================================

select_TripBy_SchId_BusId_SrcCtyId_DescCtyId=SELECT sm.ScheduleId as scheduleId, sm.BusId as busId, sm.SleeperFare as sleeperFare, sm.SeaterFare as seaterFare, sm.IsFixed as isFixedFare, tm1.CityId AS srcCityId, tm2.CityId AS destCityId, tm1.CityStops AS srcStops, \
					 						tm2.CityStops  AS destStops, tm1.ArrivalDate AS departureDate, tm1.ArrivalTime AS departureTime, tm2.ArrivalDate AS arrivalDate, tm2.ArrivalTime AS arrivalTime, \
					 						tm1.CitySequance as srcCitySequance, tm2.CitySequance as destCitySequance, \
					 						(SELECT SUM(distance) FROM trip_master tdis WHERE tdis.ScheduleId=tm1.ScheduleId AND tdis.CitySequance > tm1.CitySequance AND tdis.CitySequance <=tm2.CitySequance) AS Distance, \
											(SELECT SUM(tdis.basefare) FROM trip_master tdis WHERE tdis.ScheduleId=tm1.ScheduleId AND tdis.CitySequance > tm1.CitySequance AND tdis.CitySequance <=tm2.CitySequance) basefare \
					 						FROM digitalbihar.Schedule_master sm, digitalbihar.trip_master tm1, digitalbihar.trip_master tm2 \
											WHERE sm.ScheduleId = tm1.ScheduleId AND tm1.ScheduleId = tm2.ScheduleId AND  tm1.ScheduleId = tm2.ScheduleId AND \
											tm1.CityId =:srcCityId AND tm2.CityId =:destCityId AND sm.ScheduleId =:scheduleId AND sm.BusId = :busId AND tm1.CitySequance < tm2.CitySequance
 
#================================
# = Ticket Cancel Query
#================================
select_cancelTicketDetails_By_PnrAndPhone=select * from cancel_ticket_master where PhoneNumber=:phone and PNR =:pnr
insert_cancel_ticket_master_from_ticket_master=INSERT INTO cancel_ticket_master \
												(TicketId,ScheduleId,UserId,BusId,PNR,SeatId, TripId,SrcCityName,DestCityName,TravelName,BusType,Distance, \
												IsAc, BoadingPoint,DroppingPoint,DepartureDate,DepartureTime,ArrivalDate,ArrivalTime,SeatType,SeatNumber,SeatName,IsLowerBerth,\
												TotalFare,ChartStatus,CustomerName,Age,Email,Gender,PhoneNumber,IsLicence,BookingDate,BookBy) \
												SELECT TicketId,ScheduleId,UserId,BusId,PNR,SeatId, TripId,SrcCityName,DestCityName,TravelName,BusType,Distance, \
												IsAc, BoadingPoint,DroppingPoint,DepartureDate,DepartureTime,ArrivalDate,ArrivalTime,SeatType,SeatNumber,SeatName,IsLowerBerth,\
												TotalFare,ChartStatus,CustomerName,Age,Email,Gender,PhoneNumber,IsLicence,BookingDate,BookBy FROM ticket_master WHERE (ScheduleId=:scheduleId AND SeatId=:seatId AND BusId=:busId)
insert_cancel_ticket_master_from_ticket_master_by_ticketId=INSERT INTO cancel_ticket_master \
												(TicketId,ScheduleId,UserId,BusId,PNR,SeatId, TripId,SrcCityName,DestCityName,TravelName,BusType,Distance, \
												IsAc, BoadingPoint,DroppingPoint,DepartureDate,DepartureTime,ArrivalDate,ArrivalTime,SeatType,SeatNumber,SeatName,IsLowerBerth, \
												TotalFare,ChartStatus,CustomerName,Age,Email,Gender,PhoneNumber,IsLicence,BookingDate,BookBy,PolicyId,RefundAmount) \
												values (:ticketId, :scheduleId,:userId,:busId,:pNR,:seatId,:tripId,:srcCityName,:destCityName,:travelName,:busType,:distance,:isAc, :boadingPoint,:droppingPoint, \
												:departureDate,:departureTime,:arrivalDate,:arrivalTime,:seatType,:seatNumber,:seatName,:isLowerBerth,:totalFare,:chartStatus,:customerName,:age, \
												:email,:gender,:phoneNumber,:isLicence,:bookingDate,:bookBy, :policyId, :refundAmount)

#================================
# = Bus Ticket Book Query
#================================
select_TicketDetails_By_PnrAndPhone=SELECT 	TicketId,ScheduleId,UserId,BusId,PNR,SeatId,TripId,SrcCityName,DestCityName,TravelName,BusType,Distance,IsAc,BoadingPoint,DroppingPoint,DepartureDate,DepartureTime,ArrivalDate,ArrivalTime, \
									SeatType,SeatNumber,SeatName,IsLowerBerth,TotalFare,CustomerName,Age,Email,Gender,PhoneNumber,IsLicence,BookingDate,BookBy,\
									(CASE WHEN (SELECT 1 FROM cancel_ticket_master ctm WHERE ctm.TicketId =tm.TicketId) > 0 THEN "CAN" ELSE "CNF" END) AS ChartStatus \
                                    FROM ticket_master tm WHERE tm.PhoneNumber=:phone AND tm.PNR =:pnr
delete_ticket_master_by_scheduleId_busId_seatId=DELETE FROM ticket_master WHERE (ScheduleId=:scheduleId and SeatId=:seatId and BusId=:busId)
select_ticket_by_ticketId=select * from ticket_master where TicketId=:ticketId and PhoneNumber=:phoneNumber
delete_ticket_master_by_ticketId=DELETE FROM ticket_master WHERE TicketId =:ticketId
select_TicketDetails_By_ScheduleAndBusId= SELECT tm.TicketId as ticketId, tm.ScheduleId as scheduleId, tm.UserId as userId, \
											 tm.SeatId as seatId, tm.TripId as tripId from ticket_master tm where tm.ScheduleId=:scheduleId and tm.BusId=:busId
insert_ticket_master=INSERT INTO ticket_master (ScheduleId,UserId,BusId,PNR,SeatId, TripId,SrcCityName,DestCityName,TravelName,BusType,Distance, \
					IsAc, BoadingPoint,DroppingPoint,DepartureDate,DepartureTime,ArrivalDate,ArrivalTime,SeatType,SeatNumber,SeatName,IsLowerBerth,\
					TotalFare,ChartStatus,CustomerName,Age,Email,Gender,PhoneNumber,IsLicence,BookingDate,BookBy) VALUES \
                   (:scheduleId,:userId,:busId,:pnr,:seatId,:tripId,:srcCityName,:destCityName,:travelName,:busType,:distance,:isAc, :boadingPoint,:droppingPoint, \
					:departureDate,:departureTime,:arrivalDate,:arrivalTime,:seatType,:seatNumber,:seatName,:isLowerBerth,:totalFare,:chartStatus,:customerName,:age,\
					:email,:gender,:phoneNumber,:isLicence,:bookingDate,'CUSTOMER')
select_ticketmaster_by_scheduleId_busId=SELECT tm.* FROM ticket_master tm  WHERE tm.ScheduleId=:scheduleId AND tm.BusId=:busId AND tm.BookBy ='CUSTOMER'

#================================
# = Cancel Ticket Query
#================================
select_cancellation_policy_by_busId=select * from ticket_cancellation_policy where BusId=:busId order by ApplyPriority


select_bus_StartTime_by_scheduleId=select * from Schedule_master where ScheduleId=:scheduleId

select_scheduleIs_not_exist_in_tripmaster=SELECT t1.* FROM schedule_master t1 WHERE t1.ScheduleId NOT IN (SELECT t2.ScheduleId FROM trip_master t2) AND t1.DepartureDate > NOW() 
select_latest_Trip_by_SrcCity_and_DestCity= SELECT scheduleId FROM schedule_master WHERE sourceCityId =:srcCityId AND DestinationCityId=:destCityId \
											AND scheduleId IN (SELECT distinct(t2.ScheduleId) FROM trip_master t2 ) order by scheduleId desc LIMIT 1 
select_trip_master_by_scheduleId=SELECT t1.* FROM trip_master t1 WHERE t1.ScheduleId=:scheduleId ORDER BY CitySequance ASC
insert_trip_master=INSERT INTO `trip_master` (ScheduleId,CityId,CitySequance,CityStops,ArrivalDate,ArrivalTime,BaseFare,Distance) \
							VALUES (:scheduleId, :cityId, :citySequance, :cityStops, :arrivalDate, :arrivalTime, :baseFare, :distance)
select_current_schedule_bus=SELECT t1.* FROM schedule_master t1 WHERE  t1.DepartureDate = DATE(NOW())

#================================
# = Auditing Query
#================================
central_log_insert_query=insert into central_logs(AppName, LogLevel, LogTimeStamp, LogMessage) values( :appName, :logLevel, :logTimeStamp, :logMessage)
service_api_response_log.insert.entry=INSERT INTO api_response_log (ApiName, StartTime,EndTime,DurationMilliSeconds,RequestHttpMethod,RequestUrl,RequestBody,ResponseHttpCode,ResponseBody,RequestHeader,ResponseHeader,ChannelType) \
                                                 VALUES (:ApiName ,:StartTime,:EndTime,:DurationMilliSeconds,:RequestHttpMethod,:RequestUrl,:RequestBody,:ResponseHttpCode,:ResponseBody,:RequestHeader,:ResponseHeader,:ChannelType )
service_api_response_log.update.entry=update api_response_log set EndTime=:endTime,DurationMilliSeconds=:durationMilliSeconds,ResponseHttpCode=:responseHttpCode,ResponseBody=:responseBody,ResponseHeader=:responseHeader where LogId=:logId
service_api_response_log.get.entry= select * from api_response_log  where LogId=:logId 
#================================
# = Complain Query
#================================
select_complain_history=select * from complain_master order by ComplainId desc
select_complain_by_id=select * from complain_master where ComplainId=:compId
insert_complain_detail=insert into complain_master (SenderName,SenderEmail,ComplainType,Description,Status,IsRead,IMPFlag,ChannelType,UserId,CreatedBy,DateCreated,ModifiedBy,DateModified)\
                        values (:senderName,:senderEmail,:complainType,:description,'New',:isRead,:iMPFlag,:channelType,:userId,Session_user(),CURRENT_TIMESTAMP,Session_user(),CURRENT_TIMESTAMP)
update_complain_detail=UPDATE complain_master set SenderName=:senderName,SenderEmail=:senderEmail,ComplainType=:complainType,Description=:description,ChannelType=:channelType where ComplainId=:compId
delete_complain_detail= delete from complain_master where ComplainId=:compId
select_complain_type= select Type from complain_type where IsVisible=true order by Type desc
